This is a placeholder for a file describing file formats and layouts.
For the moment, it just describes in general terms the decisions we
have to make.

See the "Design" section of the README file for a design overview.

Layout of the FS directory
--------------------------

The layout of the FS directory is:

  revs          Subdirectory containing revs
   <revnum>      File containing rev <revnum>
  revprops      Subdirectory containing rev-props
   <revnum>      File containing rev-props for <revnum>
  transactions  Subdirectory containing transactions
   <txnid>       Directory containing transaction <txnid>
  current       File specifying current revision
  write-lock    Lockfile for commits

Files in the revprops directory are in the hash dump format used by
svn_hash_write.

The format of the "current" file is a single line of the form
"<youngest-revision> <next-node-id> <next-copy-id>\n" giving the
youngest revision, the next unique node-ID, and the next unique
copy-ID for the repository.

The "write-lock" file only exists when a process is holding a
write-lock for the final phase of a commit.  It contains a line
"<IP-address> <pid>\n" identifying the IP address and PID of the
process holding the lock.  [NOTE: This may be too Unix-specific.  It's
borrowed from Mozilla and allows detection of stale locks on the
machine which has the process which holds the lock.  The meaning of
"this machine's IP address" is a little tricky, but the only real
requirement is that it be uniquely determinable from the machine.  We
can worry about the details of this file a little later.]

Node-revision IDs
-----------------

In order to support efficient lookup of node-revisions by their IDs
and to simplify the allocation of fresh node-IDs during a transaction,
we treat the fields of a node-ID in new and interesting ways.

Within a revision file, node-revs have a txn-id field of the form
"r<rev>/<offset>", to support easy lookup.  The node-id and copy-id
fields are unique base36 values as in the BDB implementation.

New node-revision IDs assigned within a transaction have the txn-id
field of "t<txnid>".  The node-id or copy-id field may be base36
values if the node-revision is derived from a pre-existing node and/or
copy; if the node-revision must have a freshly-assigned node-id or
copy-id, it uses "_" followed by a base36 unique to the transaction.
During the final phase of a commit, node-revision IDs are rewritten to
have unique node-ID and copy-ID fields and to have "r<rev>/<offset>"
txn-id fields.

The temporary assignment of node-ID and copy-ID fields has
implications for svn_fs_compare_ids and svn_fs_check_related.  The IDs
_1.0.t1 is not related to the ID _1.0.t2 even though they have the
same node-ID, because temporary node-IDs are restricted in scope to
the transactions they belong to.

Revision file format
--------------------

A revision file contains a concatenation of various kinds of data:

  * Text and property representations
  * Node-revisions
  * At the end, the changed-path data
  * Two offsets at the very end

A representation begins with a line containing either "PLAIN\n" or
"DELTA\n" or "DELTA <rev> <offset> <length>\n", where <rev>, <offset>,
and <length> give the location of the delta base of the representation
and the amount of data it contains (not counting the header or
trailer).  If no base location is given for a delta, the base is the
empty stream.  After the initial line comes raw svndiff data, followed
by a cosmetic trailer "ENDREP\n".

If the a representation is for the text contents of a directory node,
the expanded contents are in hash dump format mapping entry names to
"<type> <id>" pairs, where <type> is "file" or "dir" and <id> gives
the ID of the child node-rev.

If a representation is for a property list, the expanded contents are
in the form of a dumped hash map mapping property names to property
values.

The marshalling syntax for node-revs is a series of fields terminated
by a blank line.  Fields havethe syntax "<name>: <value>\n", where
<name> is a symbolic field name (each symbolic name is used only once
in a given node-rev) and <value> is the value data.  Unrecognized
fields are ignored, for extensibility.  The following fields are
defined:

  id        The ID of the node-rev
  type      "file" or "dir"
  pred      The ID of the predecessor node-rev
  count     Count of node-revs since the base of the node
  text      "<rev> <offset> <length> <size> <digest>" for text rep
  props     "<rev> <offset> <length> <size> <digest>" for props rep
            <rev> and <offset> give location of rep
            <length> gives length of rep, sans header and trailer
            <size> gives size of expanded rep
            <digest> gives hex MD5 digest of expanded rep
  cpath     FS pathname node was created at
  copyfrom  "{soft|hard} <rev> <path>" of copyfrom data
  copyroot  The ID of the root node-revision of the copy

The predecessor of a node-rev crosses copy history; together with the
count field, it allows efficient determination of the base for
skip-deltas.  The first node-rev of a node contains no "pred" field.
In a node-revision resulting from a copy, the "copyfrom" field gives
the copyfrom data.  The "copyroot" field identifies the root
node-revision of the copy; it may be omitted if the node-rev is its
own copy root (as is the case for node-revs with copy history, and for
the root node of revision 0).  Note that since copy IDs are inherited
from parent directory to child, the root of a node-rev's copy may
belong to a different node, perhaps of a different type, than the
node-rev itself does.

A node-revision with no properties may omit the "props" field.

Changed-path data is represented as a series of lines, each containing
"<id> <action> <text-mod> <prop-mod> <path>\n", where <id> is the
node-rev ID of the new node-rev, <action> is "add", "delete",
"replace", or "modify", <text-mod> and <prop-mod> are "true" or
"false" indicating whether the text and/or properties changed, and
<path> is the changed pathname.  For deletes, <id> is the node-rev ID
of the deleted node-rev, and <text-mod> and <prop-mod> are always
"false".

[NOTE: We could speed up svn_repos_get_logs significantly by storing
copy history in the changed-path data and caching it upon reading the
changed-path data in svn_fs_paths_changed.  Before we finalize the
structure, we should measure the performance impact of this operation
on "svn log -v" of a large import.]

At the very end of a rev file is a pair of lines containing
"\n<root-offset> <cp-offset>\n", where <root-offset> is the offset of
the root directory node revision and <cp-offset> is the offset of the
changed-path data.

All numbers in the rev file format are unsigned and are represented as
ASCII decimal.

Transaction layout
------------------

A transaction directory has the following layout:

  rev                   Protype rev file with new text reps
  props                 Contains transaction props
  next-ids              Contains the next temporary node-ID and copy-ID
  <nid>.<cid>           New node-rev data for node
  <nid>.<cid>.props     Property list for new node-rev, if changed
  <nid>.<cid>.children  Directory contents for node-rev

The two kinds of props files are both in hash dump format.

The "latest" file contains a single line "<next-temp-node-id>
<next-temp-copy-id>\n" giving the next temporary node-ID and copy-ID
assignments (without the leading underscores).

The contents file begins with a copy of the hash dump representation
of the directory entries from the old node-rev (or a dump of the empty
hash for new directories), and then an entry for each change made to
the directory.  Additions and replacements are represented in the
usual hash dump form ("K <len>\n<key>\nV <len>\n<value>\n"); deletions
are represented in the form "D <len>\n<key>\n".

The node-rev files have the same format as node-revs in a revision
file, except that the "text" and "props" fields are augmented as
follows:

  * The "props" field may have the value "this" if properties have
    been changed and are contained in a "props" file within the
    node-rev subdirectory.

  * For directory node-revs, the "text" field may have the value
    "this" if entries have been changed and are contained in a
    "contents" file in the node-rev subdirectory.

  * For file node-revs, the "text" field may have the value "this
    <offset> <length> <size> <digest>" if the text representation is
    within the prototype rev file.

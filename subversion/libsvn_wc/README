     Oh Most High and Fragrant Emacs, please be in -*- text -*- mode!

This is the library described in the section "The working copy
management library" of svn-design.texi.

It performs local operations in the working copy, tweaking
administrative files and versioned data, generally in response to a
received delta.  It has no concept of network nor of server -- that's
libsvn_cl's job.

The Situation:
==============

The working copy is arranged as a directory tree, which, at checkout,
mirrors a tree rooted at some node in the repository.  Over time, the
working copy accumulates uncommitted changes, some of which may affect
its tree layout.  By commit time, the working copy's layout could be
arbitrarily different from the repository tree on which it was based.

Furthermore, even after an update/commit, the working copy and the
repository are not necessarily perfect mirrors, since the entire tree
is not always involved (thus local changes and local out-of-datenesses
can remain).

To resolve all situations safely, we must carefully define what is a
conflict between repository and working copy, and describe how such
conflicts are resolved.

The principles and definitions below do not presume any particular
tree delta format; the semantics require merely that working copies
and repositories have some way to communicate their `state' to each
other:

  (A) Modifying a file's contents is a change to that file only.

  (B) Renames, adds, and deletes are considered changes to *both* the
      target entity and its parent.

  (C) A working copy's "state" is a snapshot (maybe a skelta?) that
      shows the base versions, and any changes, for all entities in
      the working copy.  (Thus, given a wc state, the repository could
      theoretically reconstruct the entire working copy, modulo the
      actual content of uncomitted local changes.)

  (D) The repository's "relative state" is a list of all entities that
      have changed in the repository relative to a given working copy
      state.

  (E) Two changes "conflict" if they change the same thing.

  (F) The server never accepts a delta based on a wc state that
      conflicts with the repository.  The client is always responsible
      for sending non-conflicting deltas.

Given these principles [though see footnote 1], the process for
updates is largely the same as for commits, so the two are described
together here:

   1. The working copy creates a snapshot (W) of its state, and sends
      it to the server.

   2. The server checks if the entities listed in W have changed in
      the repository too [see footnote 2].  If there are no conflicts,
      then the commit is registered and a token sent back (or, if this
      is an update, the server sends back the appropriate delta).

   3. If there is a conflict, then...

         - commit case:
             Server sends back a message telling the working
             copy it must update.  By principle (F), the client can
             only commit based on a non-conflicting state, therefore
             the client must not only update, but also resolve any
             conflicts, before it can successfully commit.

         - update case:
             Well, this is where all the hardship happens. :-)

             First, a definition: "conflict-to-date" is when a working
             copy is up-to-date wherever there are no conflicts, but
             reflects both sides of the conflict wherever there *are*
             conflicts.

             The Subversion server tries, but is not required, to
             compute a delta that will bring the working copy
             conflict-to-date.  When it can do so, it sends this delta
             to the client, which then makes its working copy be
             conflict-to-date and leaves resolution to the user (same
             as CVS).

             However, for complex tree-structure conflicts, there is
             often no way to reflect both sides of the conflict in the
             working copy without being more confusing than helpful
             anyway.  How does one put "conflict markers" into a
             directory, especially when what was a directory might now
             be a file, or vice-versa?  For purely textual conflicts,
             CVS found a useful way to overlay the conflicting areas
             in all cases; if there is a similar overlay method for
             arbitrarily changed directory trees, I don't know what it
             is. :-)

             Therefore, an acceptable response from the Subversion
             server is: "Your working copy is too out of whack; please
             move it aside, check out a fresh one, redo your changes
             in the fresh copy, and commit from that."  (This response
             may apply to subtrees of the working copy, of course).

             The response will probably include more detail than that,
             of course.  In addition to the general out-of-whackness
             message, it can say "Directory foo was renamed to bar,
             conflicting with your new file bar; file blah was
             deleted, conflicting with your local change to file blah,
             ..." and so on.  The important thing is that these are
             informational only -- they're not changing the working
             copy, they're just telling the user what to examine when
             she syncs up two working trees manually.

             Subversion implements a _simple_ conflict-to-date delta
             generation algorithm initially.  It can improve as we get
             smarter and/or as there is demand for more informative
             conflicting updates.

--------------------------- Footnotes -----------------------------------

[1] Haven't thought carefully about whether this all works smoothly
when directory *entries* are considered entities.  I think so, but am
not sure yet.

[2] The working copy doesn't always want to compare against the pure
latest version in the repository -- it may be comparing against some
other version, or perhaps even different versions for different parts.
In fact, every entity in the working copy snapshot might have a
different "latest" to compare against, in addition to the possiblity
of a different base version.  I haven't thought about this carefully
yet either, but see no reason the snapshots can't include both sides
of the comparison for each entity.
